services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000


  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_HEAP_OPTS: "-Xms512m -Xmx512m"   # heap floor/ceiling
      KAFKA_JVM_PERFORMANCE_OPTS: >-
        -server -XX:+UseG1GC -XX:MaxGCPauseMillis=200
        -XX:InitiatingHeapOccupancyPercent=35
        -XX:+ExplicitGCInvokesConcurrent -Djava.awt.headless=true
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER:PLAINTEXT,EXTERNAL:SSL
      KAFKA_ADVERTISED_LISTENERS: DOCKER://kafka:29092,EXTERNAL://${DOMAIN}:9092
      KAFKA_LISTENERS: DOCKER://:29092,EXTERNAL://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.broker.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: f4security
      KAFKA_SSL_KEY_PASSWORD: f4security
      KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.client.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: f4security
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    volumes:
      - ./kafka/ssl:/etc/kafka/secrets
    depends_on:
      - zookeeper
    labels:
      autoheal: "true"
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server kafka:29092 >/dev/null 2>&1"]
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 90s


  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - JVM_OPTS=-Xms256M -Xmx512M
    volumes:
      - ./secrets:/etc/kafka/secrets:ro
    depends_on:
      kafka:
        condition: service_healthy
    labels:
      autoheal: "true"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/actuator/health | grep -q 'UP'"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 20s

  consul:
    image: docker.io/bitnami/consul:1.21.0
    restart: unless-stopped
    ports:
      - 8300:8300
      - 8500:8500
      - 8600:8600
    command: consul agent -dev -ui -client 0.0.0.0 -log-level=INFO
    labels:
      autoheal: "true"
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8500/v1/status/leader | grep -q :8300"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  consul-config-loader:
    image: jhipster/consul-config-loader:v0.4.1
    restart: unless-stopped
    volumes:
      - ./central-server-config:/config
    environment:
      - INIT_SLEEP_SECONDS=5
      - CONSUL_URL=consul
      - CONSUL_PORT=8500
    depends_on:
      consul:
        condition: service_healthy
    labels:
      autoheal: "true"

  redis:
    image: redis:7.4.2
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${APP_F4_PASS}
    labels:
      autoheal: "true"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a \"$APP_F4_PASS\" ping | grep -q PONG"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${APP_F4_PASS}
    depends_on:
      redis:
        condition: service_healthy
    labels:
      autoheal: "true"

  keycloak:
    image: quay.io/keycloak/keycloak:26.1.1
    restart: unless-stopped
    command:
      - "start-dev"
      - "--import-realm"
      - "--proxy=edge"
      - "--hostname=https://keycloak.${DOMAIN}"
      - "--hostname-admin=https://keycloak.${DOMAIN}"
      - "--hostname-strict=true"
    volumes:
      - ./realm-config:/opt/keycloak/data/import
      - ./realm-config/keycloak-health-check.sh:/opt/keycloak/health-check.sh
      - ./keycloak-custom-reg/lib:/opt/keycloak/providers
    environment:
      - KC_DB=dev-file
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_FEATURES=scripts
      - KC_HTTP_PORT=9080
      - KC_HTTPS_PORT=9443
      - KC_HEALTH_ENABLED=true
      - KC_HTTP_MANAGEMENT_PORT=9990
      - KC_HOSTNAME_PORT=443
      - KC_FRONTEND_URL=https://keycloak.${DOMAIN}
      - KC_HOSTNAME_STRICT_HTTPS=true
      - KC_HTTP_ENABLED=true
    healthcheck:
      test: 'bash /opt/keycloak/health-check.sh'
      interval: 5s
      timeout: 5s
      retries: 50
      start_period: 10s
    labels:
      autoheal: "true"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    restart: unless-stopped
    environment:
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - 9200:9200
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health?wait_for_status=green&timeout=10s"]
      interval: 10s
      timeout: 10s
      retries: 10

  nginx:
    build: ./nginx/
    container_name: nginx
    restart: unless-stopped
    depends_on:
      keycloak:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/letsencrypt:/etc/letsencrypt
      - ./nginx/www:/var/www/html
      - ./nginx/log:/var/log/nginx
      - ./lua/validate_token.lua:/etc/nginx/validate_token.lua
      - ./lua:/etc/nginx/lua
    command: [ "/usr/local/openresty/bin/openresty", "-g", "daemon off;" ]
    extra_hosts:
      - "host.docker.internal:host-gateway"


  gkg:
    build:
      context: ./gkg/
    container_name: gkg-server
    network_mode: host
    volumes:
      - ../repositories:/repositories
      - ./gkg/data:/data/gkg
    environment:
      - RUST_LOG=info
    restart: unless-stopped
    command: ["gkg", "server", "start"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:27495/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    labels:
      autoheal: "true"

  vault:
    image: hashicorp/vault:1.15.6
    container_name: vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_API_ADDR=http://0.0.0.0:8200
      - VAULT_DEV_ROOT_TOKEN_ID=vault-root-token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    volumes:
      - ./vault/data:/vault/data
      - ./vault/config:/vault/config
      - ./central-server-config/tls:/vault/jks:ro
    command: vault server -config=/vault/config/vault.hcl -dev -dev-root-token-id=vault-root-token -dev-listen-address=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    labels:
      autoheal: "true"
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  vault-setup:
    image: hashicorp/vault:1.15.6
    container_name: vault-setup
    depends_on:
      vault:
        condition: service_healthy
    volumes:
      - ./vault/config:/vault/config:ro
      - ./central-server-config/tls:/vault/jks:ro
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=vault-root-token
    command: /vault/config/setup-jks.sh
    restart: "no"
  # Autoheal: restarts containers with health=unhealthy and label autoheal=true
  autoheal:
    image: willfarrell/autoheal:latest
    container_name: autoheal
    restart: unless-stopped
    environment:
      - AUTOHEAL_INTERVAL=5
      - AUTOHEAL_START_PERIOD=0
      - AUTOHEAL_DEFAULT_STOP_TIMEOUT=10
      # Only heal containers with label autoheal=true (default behavior)
      # - AUTOHEAL_CONTAINER_LABEL=autoheal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
